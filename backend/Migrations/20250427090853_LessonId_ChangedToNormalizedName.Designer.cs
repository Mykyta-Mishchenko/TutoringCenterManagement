// <auto-generated />
using System;
using JwtBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20250427090853_LessonId_ChangedToNormalizedName")]
    partial class LessonId_ChangedToNormalizedName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Data.DataModels.LessonType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<int>("MaxStudentsCount")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("SchoolYear")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("TypeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("LessonTypes", null, t =>
                        {
                            t.HasCheckConstraint("CK_Lesson_MaxStudentsCount", "[MaxStudentsCount] >= 1 AND [MaxStudentsCount] <= 5");

                            t.HasCheckConstraint("CK_Lesson_Price", "[Price] >= 1 AND [Price] <= 5000");

                            t.HasCheckConstraint("CK_Lesson_SchoolYear", "[SchoolYear] >= 1 AND [SchoolYear] <= 12");
                        });
                });

            modelBuilder.Entity("backend.Data.DataModels.Mark", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<int>("MarkTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("ReportId", "MarkTypeId");

                    b.HasIndex("MarkTypeId");

                    b.ToTable("Marks", null, t =>
                        {
                            t.HasCheckConstraint("CK_Marks_Score", "[Score] >= 1 AND [Score] <= 10");
                        });
                });

            modelBuilder.Entity("backend.Data.DataModels.MarkType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("MarksTypes", (string)null);
                });

            modelBuilder.Entity("backend.Data.DataModels.RefreshSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshSessions", (string)null);
                });

            modelBuilder.Entity("backend.Data.DataModels.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("StudentLessonId")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("StudentLessonId");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("backend.Data.DataModels.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("backend.Data.DataModels.Schedule", b =>
                {
                    b.Property<int>("DateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DateId"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("DayTime")
                        .HasColumnType("time");

                    b.HasKey("DateId");

                    b.ToTable("Schedules", null, t =>
                        {
                            t.HasCheckConstraint("CK_Schedule_DayOfWeek", "[DayOfWeek] >= 1 AND [DayOfWeek] <= 7");
                        });
                });

            modelBuilder.Entity("backend.Data.DataModels.StudentLesson", b =>
                {
                    b.Property<int>("StudentLessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentLessonId"));

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherLessonId")
                        .HasColumnType("int");

                    b.HasKey("StudentLessonId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherLessonId");

                    b.ToTable("StudentLessons", (string)null);
                });

            modelBuilder.Entity("backend.Data.DataModels.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("backend.Data.DataModels.TeacherLesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("LessonId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TypeId");

                    b.ToTable("TeacherLessons", (string)null);
                });

            modelBuilder.Entity("backend.Data.DataModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("backend.Data.DataModels.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ProfileImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UsersProfile", (string)null);
                });

            modelBuilder.Entity("backend.Data.DataModels.UserRoles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("backend.Data.DataModels.LessonType", b =>
                {
                    b.HasOne("backend.Data.DataModels.Subject", "Subject")
                        .WithMany("LessonTypes")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("backend.Data.DataModels.Mark", b =>
                {
                    b.HasOne("backend.Data.DataModels.MarkType", "MarkType")
                        .WithMany("Marks")
                        .HasForeignKey("MarkTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Data.DataModels.Report", "Report")
                        .WithMany("Marks")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarkType");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("backend.Data.DataModels.RefreshSession", b =>
                {
                    b.HasOne("backend.Data.DataModels.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.DataModels.Report", b =>
                {
                    b.HasOne("backend.Data.DataModels.StudentLesson", "StudentLesson")
                        .WithMany("Reports")
                        .HasForeignKey("StudentLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentLesson");
                });

            modelBuilder.Entity("backend.Data.DataModels.StudentLesson", b =>
                {
                    b.HasOne("backend.Data.DataModels.User", "User")
                        .WithMany("StudentLessons")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Data.DataModels.TeacherLesson", "TeacherLesson")
                        .WithMany("StudentLessons")
                        .HasForeignKey("TeacherLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherLesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.DataModels.TeacherLesson", b =>
                {
                    b.HasOne("backend.Data.DataModels.Schedule", "Schedule")
                        .WithMany("Lessons")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Data.DataModels.User", "User")
                        .WithMany("TeacherLessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.DataModels.LessonType", "LessonType")
                        .WithMany("Lessons")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LessonType");

                    b.Navigation("Schedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.DataModels.UserProfile", b =>
                {
                    b.HasOne("backend.Data.DataModels.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("backend.Data.DataModels.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.DataModels.UserRoles", b =>
                {
                    b.HasOne("backend.Data.DataModels.Role", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.DataModels.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.DataModels.LessonType", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("backend.Data.DataModels.MarkType", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("backend.Data.DataModels.Report", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("backend.Data.DataModels.Role", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("backend.Data.DataModels.Schedule", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("backend.Data.DataModels.StudentLesson", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("backend.Data.DataModels.Subject", b =>
                {
                    b.Navigation("LessonTypes");
                });

            modelBuilder.Entity("backend.Data.DataModels.TeacherLesson", b =>
                {
                    b.Navigation("StudentLessons");
                });

            modelBuilder.Entity("backend.Data.DataModels.User", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("StudentLessons");

                    b.Navigation("TeacherLessons");

                    b.Navigation("UserProfile")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
